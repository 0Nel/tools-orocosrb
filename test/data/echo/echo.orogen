name 'echo'

import_types_from "echo.h"

toolkit do
    opaque_type '/OpaquePoint', 'echo/Point',
            :includes => [File.expand_path('opaques.h', File.dirname(component.deffile))]
end

task_context 'Echo' do
    extended_state_support

    input_port 'input',   'int'
    input_port 'input_struct',   'echo::Int'
    output_port 'output', 'int'
    output_port 'ondemand', 'int'

    input_port  "input_opaque", "/OpaquePoint"
    output_port "output_opaque", "/OpaquePoint"

    method(:kill).
        doc('cause a segmentation fault')

    method(:write).
        returns('int').
        argument('value', 'int', 'value_arg').
        doc('write_method')

    method(:write_opaque).
        argument('value', 'int')

    # This command starts at value and writes it on the output port. Then, it
    # increments the value at each cycle, until stop_value is found on the
    # input port
    command(:AsyncWrite).
	argument('value',  'int', 'value_arg').
	argument('stop', 'int', 'stop_value').
	doc('async_write_command')

    port_driven :input
end

task_context 'EchoSubmodel' do
    subclasses 'Echo'
end

deployment "echo" do
    echo_task = task('echo_Echo', 'Echo').
        periodic 0.05
end

