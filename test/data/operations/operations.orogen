name "operations"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "operationsTypes.hpp"
typekit do
    opaque_type '/Test/Opaque', '/Test/Parameters'
end

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the operations namespace.
task_context "Task" do
    operation('empty')

    operation('simple').
        returns('int').
        arg('b', 'Test::Parameters const&')

    operation('simple_with_return').
        returns('Test::Parameters').
        arg('b', 'Test::Parameters const&')

    operation('with_returned_opaque').
        returns('Test::Opaque').
        arg('b', 'Test::Parameters const&')

    operation('with_opaque_argument').
        returns('Test::Parameters').
        arg('b', 'Test::Opaque const&')

    operation('with_returned_parameter').
        returns('Test::Parameters').
        arg('a', 'Test::Parameters&').
        arg('b', 'Test::Opaque const&')

end

# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "operations_test" do
    # Declares it as periodic, with a period of 100ms
    task("operations", "Task").
        periodic(0.1)
end

