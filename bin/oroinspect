#! /usr/bin/env ruby

require 'optparse'
require 'orocos'

debug = false
parser = OptionParser.new do |opt|
    opt.banner = <<-EOT
usage: oroinspect <search term>"
 Searches for <search term> in installed oroGen projects
 and displays the definition of the matching objects
 it searches for: task context, types and deployments
    EOT

    opt.on('--help') do
        puts self
        exit(0)
    end
    opt.on('--debug') do
        debug = true
    end
end

pattern = parser.parse(ARGV)
if !pattern
    puts parser
    exit(1)
end

regexp = /#{pattern}/i

Orocos.load
master_project = Orocos::Generation::Project.new

def load_orogen_project(master_project, name, debug)
    master_project.load_orogen_project(name)
rescue Exception => e
    if debug
        raise
    end
    STDERR.puts "WARN: cannot load the installed oroGen project #{name}"
    STDERR.puts "WARN:     #{e.message}"
end

Orocos.available_task_models.each do |name, project_name|
    if name =~ regexp
        if tasklib = load_orogen_project(master_project, project_name, debug)
            puts
            puts "===== #{name} is a task context defined in #{project_name}"
            pp tasklib.self_tasks.find { |t| t.name == name }
        end
    end
end

Orocos.available_deployments.each do |name, pkg|
    if name =~ regexp
        project_name = pkg.project_name
        if tasklib = load_orogen_project(master_project, project_name, debug)
            puts
            puts "===== #{name} is a deployment defined in #{project_name}"
            pp tasklib.deployers.find { |n| n.name == name }
        end
    end
end

seen_types = ValueSet.new
Orocos.available_projects.each_key do |project_name|
    next if !master_project.has_typekit?(project_name)
    puts "#{project_name} has a typekit"

    typekit = load_orogen_project(master_project, project_name, debug).typekit
    matching_types = typekit.typelist.grep(regexp)
    if !matching_types.empty?
        master_project.using_typekit(project_name)
        matching_types.each do |type_name|
            type = master_project.find_type(type_name)
            if !seen_types.include?(type)
                puts
                puts "===== #{type.name} is a type defined by #{project_name}"
                pp type
                seen_types << type
            end
        end
    end
end

