#! /usr/bin/env ruby

if !ARGV.first
    STDERR.puts "usage: oroinspect <search term>"
    STDERR.puts "Searches for <search term> in installed oroGen projects"
    STDERR.puts "and displays the definition of the matching objects"
    STDERR.puts "it searches for: task context, types and deployments"
    exit(0)
end

require 'orocos'
regexp = /#{ARGV.first}/i

Orocos.load
master_project = Orocos::Generation::Project.new

def load_orogen_project(master_project, name)
    master_project.load_orogen_project(name)
rescue Exception => e
    STDERR.puts "WARN: cannot load the installed oroGen project #{name}"
    STDERR.puts "WARN:     #{e.message}"
end

Orocos.available_task_models.each do |name, project_name|
    if name =~ regexp
        puts
        puts "===== #{name} is a task context defined in #{project_name}"
        tasklib = load_orogen_project(master_project, project_name)
        pp tasklib.self_tasks.find { |t| t.name == name }
    end
end

Orocos.available_deployments.each do |name, pkg|
    if name =~ regexp
        project_name = pkg.project_name
        puts
        puts "===== #{name} is a deployment defined in #{project_name}"
        tasklib = load_orogen_project(master_project, project_name)
        pp tasklib.deployers.find { |n| n.name == name }
    end
end

seen_types = ValueSet.new
Orocos.available_projects.each_key do |project_name|
    project  = load_orogen_project(master_project, project_name)
    pkg      =
        begin
            Utilrb::PkgConfig.new("#{project_name}-toolkit-#{Orocos.orocos_target}")
        rescue Utilrb::PkgConfig::NotFound
            next
        end

    typelist = File.join(pkg.prefix, 'share', 'orogen', "#{project_name}.typelist")
    matching_types = File.read(typelist).split("\n").grep(regexp)
    if !matching_types.empty?
        registry = Typelib::Registry.import(pkg.type_registry)
        matching_types.each do |type_name|
            type = registry.get(type_name)
            if !seen_types.include?(type)
                puts
                puts "===== #{type.name} is a type defined by #{project_name}"
                pp type
                seen_types << type
            end
        end
    end
end

